install.packages("KernSmooth")
library (KernSmooth)
library(datasets)
data(iris)
?iris
head(iris)
s <- split(iris,iris$Species)
s
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
s2 <- s[3]
s2
class(s2)
s3<-as.table(s2)
columnOne <- iris[101:150,"sepal.Length"]
columnOne
colMeans(s,"sepal.Length")
colMeans(s[,"sepal.Length"])
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "SepalWidth"])))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "SepalWidth")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
apply(iris, 2, mean)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
s <- split(mtcars,mtcars$cyl)
lapply(s, function(x) colMeans(x[,mtcars$mpg]))
lapply(s, function(x) colMeans(x[,"mpg"]))
lapply(s, function(x) colMeans(x[,c("mpg","hp")]))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
t <- sapply(split(mtcars$hp, mtcars$cyl), mean)
t
class(t)
t[3]-t[1]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
cachemean(a)
a$set(c(10,20,30,40))
cachemean(a)
a$getmean(a)
a$getmean()
a$y
a$x
source("cacheMatrix.R")
setwd("~/Desktop/School/Coursera/ProgrammingAssignment2-master")
source("cacheMatrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$get()
makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getinverse()
## Return a matrix that is the inverse of 'x'
source("cacheMatrix.R")
source("cacheMatrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix@get()
amatrix$get()
amatrix$set(matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3))
amatrix$get()
cacheSolve(amatrix)
source("cacheMatrix.R")
amatrix$set(matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3))
amatrix$get()
cacheSolve(amatrix)
solve(amatrix)
amatrix
source("cacheMatrix.R")
> amatrix$set(matrix(c(1,2,3,4,5,6,7,9,9), nrow=3, ncol=3))
source("cacheMatrix.R")
amatrix$set(matrix(c(1,2,3,4,5,6,7,9,9), nrow=3, ncol=3))
amatrix$get()
cacheSolve(amatrix)
cacheSolve(amatrix)
source("cacheMatrix.R")
amatrix$set(matrix(c(1,2,3,4,5,6,7,9,9), nrow=3, ncol=3))
source("cacheMatrix.R")
amatrix$set(matrix(c(1,2,3,4,5,6,7,9,9), nrow=3, ncol=3))
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$get()
